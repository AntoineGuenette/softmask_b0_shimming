import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import Normalize
from matplotlib.cm import get_cmap
import matplotlib.patches as patches

bg_color = '#E3E3E3'
text_color = '#0D1B2A'

# Set up the figure and turn off axes
fig, ax = plt.subplots(figsize=(8, 5))
ax.set_xlim(-1.5, 9)
ax.set_ylim(0, 6.5)
ax.axis('off')

# Create a symmetric colormap centered at 0, ranging from -100 to 100 Hz
temp_cmap = get_cmap('bwr')
norm = Normalize(vmin=-100, vmax=100)

# Define positions of circles representing slices
positions = [(1.5, 4.5), (3.5, 4.5), (1.5, 2), (3.5, 2)]
colors = [100, -100, 100, -100]  # Simulated fieldmap values before shimming

# Draw gray background boxes behind slices
def draw_background_boxes(offset_x=0):
    for x, y in positions:
        rect = patches.Rectangle((x + offset_x - 0.75, y - 0.75), 1.4, 1.4, linewidth=1,
                                 edgecolor='black', facecolor='gray')
        ax.add_patch(rect)

# Draw colored circles representing uncorrected slices before shimming
def draw_colored_circles():
    for idx, (x, y) in enumerate(positions):
        circle = patches.Circle((x, y), 0.6, linewidth=1, edgecolor='black',
                                facecolor=temp_cmap(norm(colors[idx])))
        ax.add_patch(circle)

# Draw white circles representing corrected slices after shimming
def draw_white_circles():
    for (x, y) in positions:
        circle = patches.Circle((x + 4, y), 0.6, linewidth=1, edgecolor='black', facecolor='white')
        ax.add_patch(circle)

# Draw elements for both sides (before and after shimming)
draw_background_boxes(offset_x=0)
draw_colored_circles()
draw_background_boxes(offset_x=4)
draw_white_circles()

# Main titles
ax.text(1.5, 5.8, 'Avant "shimming"', ha='center', fontsize=16)
ax.text(5.5, 5.8, 'Après "shimming"', ha='center', fontsize=16)

# Mask type labels on the left side
ax.text(-0.3, 4.5, 'Masque\nbinaire\ncylindrique', va='center', ha='right', fontsize=14)
ax.text(-0.3, 2.0, 'Masque\nhybride\nbinaire / gaussien', va='center', ha='right', fontsize=14)

# Descriptive annotations in the center
ax.text(1.5, 3.3, 'Tranches avec déviation maximale', ha='center', fontsize=12)
ax.text(1.5, 3.1, 'positive', color='red', ha='center', fontsize=12)
ax.text(3.5, 3.1, 'négative', color='blue', ha='center', fontsize=12)

ax.text(5.5, 3.3, 'Tranches corrigées pondérées', ha='center', fontsize=12)

# Add a colorbar to indicate magnetic field deviation in Hz
cbar_ax = fig.add_axes([0.88, 0.2, 0.02, 0.6])
cb = plt.colorbar(plt.cm.ScalarMappable(norm=norm, cmap=temp_cmap), cax=cbar_ax)
cb.set_label('Déviation du champ (Hz)', fontsize=10)

fig.savefig("/Users/antoineguenette/Desktop/figures_affiche/figure_slices.svg", format='svg', bbox_inches='tight', facecolor=bg_color)
fig.savefig("/Users/antoineguenette/Desktop/figures_affiche/figure_slices.png", dpi=300, bbox_inches='tight', facecolor=bg_color)

plt.tight_layout()
plt.show()
